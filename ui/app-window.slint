import "./ChivoMono-VariableFont_wght.ttf";
import { Button, ComboBox } from "std-widgets.slint";
import { MenuItem } from "./components/menu-item.slint";
import { Switch, Status } from "./components/indicators.slint";
import { SingleForm, ExposeForm, Submit } from "./components/forms.slint";
import { ListView } from "std-widgets.slint";

struct Port { name: string, id: string }

export global AppState {
    callback hide_device(string);
    callback expose_device(string, string, string);
    callback choose_midi_port(int);
    callback send_dummy_cc(string);
    callback copy_to_clipboard();
    callback clear_all();
    in property <[string]> midi-ports;
}

export component AppWindow inherits Window {
    in property <[string]> exposed_devices;
    in-out property <brush> bgc: rgb(200,200,200);

    title: "midiserv";
    background: root.bgc;
    min-height: 450px;
    min-width: 500px;
    preferred-width: 500px;
    default-font-family: "Chivo Mono";
    default-font-size: 12px;

    VerticalLayout {
        alignment: start;
        padding: 10px;
        Text {
            text: "midiserv";
            font-size: 30px;
            color:black;
        }
        VerticalLayout {
            padding-top: 20px;
            spacing: 10px;

            MenuItem{text: "connection status"; Status{}}
            MenuItem{text: "passthrough allowed"; Switch{}}
            MenuItem{
                text: "send dummy cc";
                SingleForm {
                    on-clicked(cc) => {AppState.send_dummy_cc(cc)}
                }
            }
            MenuItem{
                width: parent.width;
                text: "select midi port";
                port-selector := ComboBox {
                    min-width: parent.width - 210px;
                    model: AppState.midi-ports;
                    selected => {AppState.choose_midi_port(port-selector.current_index)}
                    current-value: "";
                }
            }
            MenuItem{
                text: "expose device";
                ExposeForm{
                placeholders: ["cc#","type","desc"];
                on-clicked(t1,t2,t3) =>
                    {AppState.expose_device(t1, t2, t3)}
                }
            }

            currently-exposed := VerticalLayout {
                MenuItem {text: "currently exposed"; Rectangle{} }
                HorizontalLayout {
                    alignment: center;
                    ListView {
                        height: root.height - 360px;
                        width: root.width/2;
                        for device[index] in exposed_devices :
                            Submit {
                                text: device;
                                on-clicked => { AppState.hide_device(index) }
                            }
                    }
                }
            }
        }
    }
    VerticalLayout {
    alignment: end;
    padding: 10px;
        HorizontalLayout {
            padding-top: 20px;
            spacing: 5px;
            Submit{text: "load file";}
            Submit{text: "copy exposed"; on-clicked => {AppState.copy_to_clipboard()}}
            Submit{text: "clear all"; background: rgb(248,168,168); on-clicked => {AppState.clear_all()}}
            Submit{text: "disconnect"; background: rgb(248,168,168);}
        }
    }
}
